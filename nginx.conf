
#user  nobody;
#Defines which Linux system user will own and run the Nginx server

worker_processes 1;
#Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.

#error_log  logs/error.log; #error_log  logs/error.log  notice;
#Specifies the file where server logs.

#pid        logs/nginx.pid;
#nginx will write its master process ID(PID).
events {
	worker_connections 1024;
	# worker_processes and worker_connections allows you to calculate maxclients value:
	# max_clients = worker_processes * worker_connections
}


http {
	include mime.types;
	# anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block

	default_type application/octet-stream;
	#

	#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	#                  '$status $body_bytes_sent "$http_referer" '
	#                  '"$http_user_agent" "$http_x_forwarded_for"';

	#access_log  logs/access.log  main;
	sendfile off;
	# If serving locally stored static files, sendfile is essential to speed up the server,
	# But if using as reverse proxy one can deactivate it

	#tcp_nopush     on;
	# works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.

	#keepalive_timeout  0;
	keepalive_timeout 65;
	# timeout during which a keep-alive client connection will stay open.

	#gzip  on;
	# tells the server to use on-the-fly gzip compression.

	server {
		# You would want to make a separate file with its own server block for each virtual domain
		# on your server and then include them.
		#tells Nginx the hostname and the TCP port where it should listen for HTTP connections.
		# listen 80; is equivalent to listen *:80;

		server_name localhost;
		# lets you doname-based virtual hosting

		#charset koi8-r;

		location / {
			proxy_pass http://127.0.0.1:6080;
			proxy_set_header Host $http_host;
		}

		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
			root html;
		}

		listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/letsencrypt/live/ca1.lodestone.link/fullchain.pem; # managed by Certbot
		ssl_certificate_key /etc/letsencrypt/live/ca1.lodestone.link/privkey.pem; # managed by Certbot
		include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
		ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
	}

	server {
		if ($host ~ ^[^.]+\.ca1\.lodestone\.link$) {
			return 301 https://$host$request_uri;
			} # managed by Certbot

			listen 80;

			server_name localhost;
			return 404; # managed by Certbot


		}
	}